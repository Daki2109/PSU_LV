1.zad
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models, callbacks
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import itertools

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

x_train = x_train[..., np.newaxis]
x_test = x_test[..., np.newaxis]

model = models.Sequential([
    layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Conv2D(64, kernel_size=(3,3), activation='relu'),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

tensorboard_cb = callbacks.TensorBoard(log_dir='./logs', histogram_freq=1)

checkpoint_cb = callbacks.ModelCheckpoint('best_cnn_model.h5',
                                          save_best_only=True,
                                          monitor='val_accuracy',
                                          mode='max')

history = model.fit(x_train, y_train,
                    epochs=15,
                    batch_size=64,
                    validation_split=0.1,
                    callbacks=[tensorboard_cb, checkpoint_cb])

best_model = models.load_model('best_cnn_model.h5')

train_loss, train_acc = best_model.evaluate(x_train, y_train, verbose=0)
test_loss, test_acc = best_model.evaluate(x_test, y_test, verbose=0)

print(f"Točnost na trening skupu: {train_acc:.4f}")
print(f"Točnost na testnom skupu: {test_acc:.4f}")

y_train_pred = np.argmax(best_model.predict(x_train), axis=1)
y_test_pred = np.argmax(best_model.predict(x_test), axis=1)

def plot_confusion_matrix(y_true, y_pred, title):
    cm = confusion_matrix(y_true, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot(cmap=plt.cm.Blues)
    plt.title(title)
    plt.show()

plot_confusion_matrix(y_train, y_train_pred, "Matrica zabune - trening skup")
plot_confusion_matrix(y_test, y_test_pred, "Matrica zabune - testni skup")

2.zad
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import cv2

model = load_model('best_cnn_model.h5')

img_path = 'test.png'
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

img_resized = cv2.resize(img, (28, 28))

if np.mean(img_resized) > 127:
    img_resized = 255 - img_resized

plt.imshow(img_resized, cmap='gray')
plt.title('Ulazna slika za klasifikaciju')
plt.axis('off')
plt.show()


img_input = img_resized.astype('float32') / 255.0
img_input = img_input[np.newaxis, ..., np.newaxis]  # batch i kanal dimenzije


pred = model.predict(img_input)
pred_class = np.argmax(pred)

print(f"Predviđena oznaka: {pred_class}")



